#!/system/bin/sh
# Terminal Magisk Mod Template
# by veez21 @ xda-developers


# Magisk Module ID **
ID="ccbins"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
MOUNTPATH="/data/adb/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d $MODDIR ] && { echo "Module not detected!"; exit 1; }\

# Set path to your busybox if applicable
_bb=$MODDIR/busybox

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/data/local/tmp/$ID.log
oldLOG=/data/local/tmp/$ID-old.log
# > Verbose output goes here
VERLOG=/data/local/tmp/$ID-verbose.log
oldVERLOG=/data/local/tmp/$ID-verbose-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null
set -x 2>$VERLOG

# Main
# > You can start your MOD here.
# > You can add functions, variables & etc.
# > Rather than editing the default vars above.
quit() {
  rm -f $MODDIR/tmp
  exit 0
}

list_installed() {
  local curlocs
  for i in $locs; do
    [ "$(grep -w $i $MODDIR/.installed)" ] && curlocs="$i $curlocs"
  done
  curlocs="$(echo $curlocs | tr ' ' '\n' | tac | tr '\n' ' ')"
  for i in $curlocs; do
    echo "$div"
    title_div "$i"
    echo "$div"
    grep -w $i $MODDIR/.installed | cut -d ' ' -f1-2
  done
}

list_locs() {
  rm -f $MODDIR/tmp
  local num=0
  echo "0: Go back to main menu"
  for i in $locs; do
    [ -d "$i" ] || continue
    num=$((num+1))
    echo "$num: $i" | tee -a $MODDIR/tmp;
  done
}

change_loc() {
  [ -f $MODDIR/.loc ] && insloc="$(cat $MODDIR/.loc)"
  while true; do
    echo "$div"
    title_div "Current install location:"
    title_div "$insloc"
    echo "$div"
    title_div "Change to which location?"
    echo "$div"
    list_locs
    while true; do
      read -r choice
      echo " "
      [ "$(grep -w "$choice:" $MODDIR/tmp 2>/dev/null)" ] && break
      case $choice in
        0) break 2;;
        q) quit;;
        *) echo "Invalid option! Try again";;
      esac
    done
    insloc="$(grep -w "$choice:" $MODDIR/tmp 2>/dev/null | awk '{print $2}')"
    mkdir $MODDIR$insloc 2>/dev/null
    echo $insloc > $MODDIR/.loc
    echo -e "Install location has been changed to $insloc\n"
    break
  done
}

list_binaries() {
  rm -f $MODDIR/tmp
  local num=0
  if [ "$1" != "-i" ]; then
    local arg="-z "
    if [ "$(grep -w "Busybox" $MODDIR/.installed 2>/dev/null)" ] && [ "$(grep -w "Busybox" $MODDIR/.installed 2>/dev/null | awk '{print $3}')" == "$insloc" ]; then 
      local box="busybox"
    elif [ "$(grep -w "Coreutils" $MODDIR/.installed 2>/dev/null)" ] && [ "$(grep -w "Coreutils" $MODDIR/.installed 2>/dev/null | awk '{print $3}')" == "$insloc" ]; then 
      local box="coreutils"
    fi
  fi
  echo "0: None, go back to main menu"
  while read -r line; do
    case $box in
      "busybox") [ "$(echo $line | awk '{print $1}')" == "Coreutils" ] && continue;;
      "coreutils") [ "$(echo $line | awk '{print $1}')" == "Busybox" ] && continue;;
    esac
    line="$(echo $line | awk '{print $1 " " $2}')"
    local curloc="$(grep -w "$line" $MODDIR/.installed 2>/dev/null | awk '{print $3}')"
    [ "$curloc" == "$insloc" -o "$1" == "-i" ] && line="$line $curloc"
    [ $arg"$(grep -x "$line" $MODDIR/.installed 2>/dev/null)" ] && { num=$((num+1)); echo "$num: $line" | tee -a $MODDIR/tmp; }
  done < $MODDIR/.binaries
}

remove_binary() {
  while true; do
    echo "$div"
    title_div "Remove which binary?"
    echo "$div"
    list_binaries -i
    while true; do
      read -r choice
      echo " "
      [ "$(grep -w "$choice:" $MODDIR/tmp 2>/dev/null)" ] && break
      case $choice in
        0) break 2;;
        q) quit;;
        *) echo "Invalid option! Try again";;
      esac
    done
    local binary=$(grep -w "$choice:" $MODDIR/tmp | awk '{print $2}')
    local ibinary=$(echo $binary | tr '[:upper:]' '[:lower:]') extras="$(grep -w $binary $MODDIR/.binaries | awk '{print $4}')"
    for curloc in $(find $MODDIR/system -type f -name $ibinary | cut -d / -f6-7); do
      curloc="/$curloc"
      is_mounted $curloc/$ibinary && local unmount=true || local unmount=false
      for i in $(grep -w $binary $MODDIR/.binaries | awk '{print $3}' | sed "s/,/ /g"); do
        $unmount && umount -l $curloc/$i
        rm -f $MODDIR$curloc/$i
        case $i in
          "busybox"|"coreutils") 
            for j in $MODDIR$curloc/*; do
              if [ -L $j ]; then
                $unmount && umount -l $j
                rm -f $j
              fi
            done;;
        esac
      done
    done
    if $unmount; then
      for i in $(find $MODDIR/system/$extras -type f); do
        umount -l $(echo $i | sed "s|$MODDIR||")
      done
    fi
    [ "$extras" ] && rm -rf $MODDIR/system/$extras
    sed -i "/$binary/d" $MODDIR/.installed
    echo -e "$binary has been removed!\n"
  done
}

install_binary() {
  while true; do
    echo "$div"
    title_div "Install which binary?"
    echo "$div"
    title_div "Current install location:"
    title_div "$insloc"
    echo "$div"
    list_binaries
    while true; do
      read -r choice
      echo " "
      [ "$(grep -w "$choice:" $MODDIR/tmp 2>/dev/null)" ] && break
      case $choice in
        0) break 2;;
        q) quit;;
        *) echo "Invalid option! Try again";;
      esac
    done
    echo "$(grep -w "$choice:" $MODDIR/tmp | awk '{print $2 " " $3}' | sed "s| *$| $insloc|")" >> $MODDIR/.installed
    local binary=$(grep -w "$choice:" $MODDIR/tmp | awk '{print $2}')
    local ibinary=$(echo $binary | tr '[:upper:]' '[:lower:]') extras="$(grep -w $binary $MODDIR/.binaries | awk '{print $4}')"
    echo "Downloading $binary"
    for i in $(grep -w $binary $MODDIR/.binaries | awk '{print $3}' | sed "s/,/ /g"); do
      wget -O $MODDIR$insloc/$i https://github.com/Zackptg5/Cross-Compiled-Binaries-Android/raw/master/$ibinary/$i-$ARCH 2>/dev/null & e_spinner
      set_perm $MODDIR$insloc/$i 0 0 0755
      case $i in
        "busybox") 
          $MODDIR$insloc/$i --install -s $MODDIR$insloc
          for j in $($MODDIR$insloc/$i --list); do
            [ -e "/sbin/.magisk/mirror$insloc/$j" ] && rm -f $MODDIR$insloc/$j
          done;;
        "coreutils")
          local dir=`pwd`
          cd $MODDIR$insloc
          for i in $(./coreutils --help | sed -n "/^ \[/,/^$/p"); do
            ln -sf coreutils $i
            [ "$i" == "cp" -o "$i" == "mv" ] && continue
            [ -e "/sbin/.magisk/mirror$insloc/$i" -o "$i" == "[" -o "$i" == "test" ] && rm -f $i
          done
          cd $dir;;
      esac
    done
    if [ "$extras" ]; then
      wget -qO $MODDIR/$extras.zip https://github.com/Zackptg5/Cross-Compiled-Binaries-Android/raw/master/$ibinary/$extras.zip 2>/dev/null & e_spinner
      unzip -qod $MODDIR/system $MODDIR/$extras.zip
      rm -f $MODDIR/$extras.zip
    fi
    echo -e "$binary has been installed!\nReboot for changes to take effect\n"
  done
}

backup_config() {
  rm -rf $bakloc
  mkdir -p $bakloc
  cp -f $MODDIR/.installed $bakloc/.installed
  cp -rf $MODDIR/system $bakloc
  rm -f $bakloc/system/bin/ccbins
  echo -e "Current config backed up!\n"
}

restore_config() {
  local newloc=/data/adb/modules_update/$MODID
  mkdir /data/adb/modules_update 2>/dev/null
  cp -af $MODDIR $newloc
  touch $newloc/update
  rm -af $newloc/system
  cp -af $bakloc/* $newloc/
  cp -af $MODDIR/system/bin/ccbins $newloc/system/bin/ccbins
  echo -e "Old config restored!\nReboot to apply it!\n"
}

bakloc=/data/local/ccbinsbackup
locs="/system/bin /system/xbin /vendor/bin /vendor/xbin /product/bin /product/xbin"
[ -f $MODDIR/.loc ] && insloc="$(cat $MODDIR/.loc)" || insloc=/system/bin
if test_connection; then
  online=true
  echo "Fetching available binaries"
  rm -f $MODDIR/.binaries
  wget -qO $MODDIR/.binaries https://raw.githubusercontent.com/Zackptg5/Cross-Compiled-Binaries-Android/master/includes.txt 2>/dev/null & e_spinner
  echo " "
else
  online=false
  echo -e "No internet connection!\nOnline functionality disabled"
fi
echo " "

while true; do
  echo "$div"
  title_div "Binary Installer"
  echo "$div"
  echo "Current install location:"
  echo "$insloc"
  echo "$div"
  title_div "Choose option"
  echo "$div"
  echo "0: Change install location"
  echo "1: List installed binaries"
  echo "2: List downloadable binaries"
  echo "3: Remove binary"
  if $online; then
    echo "4: Install binary"
    [ -s $MODDIR/.installed ] && echo "5: Backup current config"
    [ -d $bakloc ] && echo "6: Restore last config"
  else
    [ -s $MODDIR/.installed ] && echo "4: Backup current config"
  fi
  echo "Type 'q' at any time to quit"
  while true; do
    read -r choice
    echo " "
    case $choice in
      0|1|2|3) break;;
      4) $online && break || { [ -s $MODDIR/.installed ] && break || echo "Invalid option! Try again"; };;
      5) $online && [ -s $MODDIR/.installed ] && break || echo "Invalid option! Try again";;
      6) $online && [ -d $bakloc ] && break || echo "Invalid option! Try again";;
      q) quit;;
      *) echo "Invalid option! Try again";;
    esac
  done

  case $choice in
    0) change_loc;;
    1) [ -s $MODDIR/.installed ] && list_installed || echo "No binaries installed!"; echo " ";;
    2) cat $MODDIR/.binaries | awk '{print $1 " " $2}'; echo " ";;
    3) [ -s $MODDIR/.installed ] && remove_binary || echo -e "No binaries installed!\n";;
    4) $online && install_binary || backup_config;;
    5) backup_config;;
    6) restore_config;;
  esac
done
